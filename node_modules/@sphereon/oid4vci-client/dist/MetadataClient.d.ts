import { CredentialIssuerMetadata, CredentialOfferPayload, CredentialOfferRequestWithBaseUrl, EndpointMetadataResult, OpenIDResponse, WellKnownEndpoints } from '@sphereon/oid4vci-common';
export declare class MetadataClient {
    /**
     * Retrieve metadata using the Initiation obtained from a previous step
     *
     * @param credentialOffer
     */
    static retrieveAllMetadataFromCredentialOffer(credentialOffer: CredentialOfferRequestWithBaseUrl): Promise<EndpointMetadataResult>;
    /**
     * Retrieve the metada using the initiation request obtained from a previous step
     * @param request
     */
    static retrieveAllMetadataFromCredentialOfferRequest(request: CredentialOfferPayload): Promise<EndpointMetadataResult>;
    /**
     * Retrieve all metadata from an issuer
     * @param issuer The issuer URL
     * @param opts
     */
    static retrieveAllMetadata(issuer: string, opts?: {
        errorOnNotFound: boolean;
    }): Promise<EndpointMetadataResult>;
    /**
     * Retrieve only the OID4VCI metadata for the issuer. So no OIDC/OAuth2 metadata
     *
     * @param issuerHost The issuer hostname
     */
    static retrieveOpenID4VCIServerMetadata(issuerHost: string, opts?: {
        errorOnNotFound?: boolean;
    }): Promise<OpenIDResponse<CredentialIssuerMetadata> | undefined>;
    /**
     * Allows to retrieve information from a well-known location
     *
     * @param host The host
     * @param endpointType The endpoint type, currently supports OID4VCI, OIDC and OAuth2 endpoint types
     * @param opts Options, like for instance whether an error should be thrown in case the endpoint doesn't exist
     */
    static retrieveWellknown<T>(host: string, endpointType: WellKnownEndpoints, opts?: {
        errorOnNotFound?: boolean;
    }): Promise<OpenIDResponse<T>>;
}
//# sourceMappingURL=MetadataClient.d.ts.map