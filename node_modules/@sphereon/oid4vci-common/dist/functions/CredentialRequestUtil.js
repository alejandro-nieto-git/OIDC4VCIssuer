"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentialRequestForVersion = exports.getTypesFromRequest = void 0;
const types_1 = require("../types");
const FormatUtils_1 = require("./FormatUtils");
function getTypesFromRequest(credentialRequest, opts) {
    let types = [];
    if (credentialRequest.format === 'jwt_vc_json' || credentialRequest.format === 'jwt_vc') {
        types = credentialRequest.types;
    }
    else if (credentialRequest.format === 'jwt_vc_json-ld' || credentialRequest.format === 'ldp_vc') {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        types =
            'credential_definition' in credentialRequest && credentialRequest.credential_definition
                ? // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    credentialRequest.credential_definition.types
                : credentialRequest.types;
    }
    else if (credentialRequest.format === 'vc+sd-jwt') {
        types = [credentialRequest.vct];
    }
    if (!types || types.length === 0) {
        throw Error('Could not deduce types from credential request');
    }
    if (opts === null || opts === void 0 ? void 0 : opts.filterVerifiableCredential) {
        return types.filter((type) => type !== 'VerifiableCredential');
    }
    return types;
}
exports.getTypesFromRequest = getTypesFromRequest;
function getCredentialRequestForVersion(credentialRequest, version) {
    if (version === types_1.OpenId4VCIVersion.VER_1_0_08) {
        const draft8Format = (0, FormatUtils_1.getFormatForVersion)(credentialRequest.format, version);
        const types = getTypesFromRequest(credentialRequest, { filterVerifiableCredential: true });
        return {
            format: draft8Format,
            proof: credentialRequest.proof,
            type: types[0],
        };
        /* } else if (version === OpenId4VCIVersion.VER_1_0_11) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const { credential_definition = undefined, ...requestv11 } = credentialRequest;
        return {
          ...requestv11,
          ...credential_definition,
        } as CredentialRequestV1_0_11;*/
    }
    return credentialRequest;
}
exports.getCredentialRequestForVersion = getCredentialRequestForVersion;
//# sourceMappingURL=CredentialRequestUtil.js.map