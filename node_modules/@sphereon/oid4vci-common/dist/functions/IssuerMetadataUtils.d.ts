import { AuthorizationServerMetadata, CredentialIssuerMetadata, CredentialSupported, CredentialSupportedTypeV1_0_08, CredentialSupportedV1_0_08, IssuerMetadataV1_0_08, MetadataDisplay, OID4VCICredentialFormat, OpenId4VCIVersion } from '../types';
export declare function getSupportedCredentials(opts?: {
    issuerMetadata?: CredentialIssuerMetadata | IssuerMetadataV1_0_08;
    version: OpenId4VCIVersion;
    types?: string[][];
    format?: (OID4VCICredentialFormat | string) | (OID4VCICredentialFormat | string)[];
}): CredentialSupported[];
export declare function getSupportedCredential(opts?: {
    issuerMetadata?: CredentialIssuerMetadata | IssuerMetadataV1_0_08;
    version: OpenId4VCIVersion;
    types?: string | string[];
    format?: (OID4VCICredentialFormat | string) | (OID4VCICredentialFormat | string)[];
}): CredentialSupported[];
export declare function getTypesFromCredentialSupported(credentialSupported: CredentialSupported, opts?: {
    filterVerifiableCredential: boolean;
}): string[];
export declare function credentialsSupportedV8ToV11(supportedV8: CredentialSupportedTypeV1_0_08): CredentialSupported[];
export declare function credentialSupportedV8ToV11(key: string, supportedV8: CredentialSupportedV1_0_08): CredentialSupported[];
export declare function getIssuerDisplays(metadata: CredentialIssuerMetadata | IssuerMetadataV1_0_08, opts?: {
    prefLocales: string[];
}): MetadataDisplay[];
/**
 * TODO check again when WAL-617 is done to replace how we get the issuer name.
 */
export declare function getIssuerName(url: string, credentialIssuerMetadata?: Partial<AuthorizationServerMetadata> & (CredentialIssuerMetadata | IssuerMetadataV1_0_08)): string;
//# sourceMappingURL=IssuerMetadataUtils.d.ts.map