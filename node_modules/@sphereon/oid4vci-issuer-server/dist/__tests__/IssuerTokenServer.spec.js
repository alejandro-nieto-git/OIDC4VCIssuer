"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const oid4vci_issuer_1 = require("@sphereon/oid4vci-issuer");
const state_manager_1 = require("@sphereon/oid4vci-issuer/dist/state-manager");
const ssi_express_support_1 = require("@sphereon/ssi-express-support");
const jose = __importStar(require("jose"));
const supertest_1 = __importDefault(require("supertest"));
const OID4VCIServer_1 = require("../OID4VCIServer");
describe('OID4VCIServer', () => {
    let app;
    let expressSupport;
    // let server: http.Server
    const preAuthorizedCode1 = 'SplxlOBeZQQYbYS6WxSbIA1';
    const preAuthorizedCode2 = 'SplxlOBeZQQYbYS6WxSbIA2';
    const preAuthorizedCode3 = 'SplxlOBeZQQYbYS6WxSbIA3';
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const signerCallback = (jwt, kid) => __awaiter(void 0, void 0, void 0, function* () {
            const privateKey = (yield jose.generateKeyPair(oid4vci_common_1.Alg.ES256)).privateKey;
            return new jose.SignJWT(Object.assign({}, jwt.payload)).setProtectedHeader(Object.assign(Object.assign({}, jwt.header), { alg: oid4vci_common_1.Alg.ES256 })).sign(privateKey);
        });
        const credentialOfferState1 = {
            preAuthorizedCode: preAuthorizedCode1,
            userPin: '493536',
            createdAt: +new Date(),
            lastUpdatedAt: +new Date(),
            status: oid4vci_common_1.IssueStatus.OFFER_CREATED,
            credentialOffer: {
                credential_offer: {
                    credential_issuer: 'test_issuer',
                    credentials: [
                        {
                            format: 'ldp_vc',
                            credential_definition: {
                                '@context': ['test_context'],
                                types: ['VerifiableCredential'],
                                credentialSubject: {},
                            },
                        },
                    ],
                    grants: {
                        'urn:ietf:params:oauth:grant-type:pre-authorized_code': {
                            user_pin_required: true,
                            'pre-authorized_code': preAuthorizedCode1,
                        },
                    },
                },
            },
        };
        const credentialOfferState2 = Object.assign(Object.assign({}, credentialOfferState1), { preAuthorizedCode: preAuthorizedCode2, credentialOffer: Object.assign(Object.assign({}, credentialOfferState1.credentialOffer), { credential_offer: Object.assign(Object.assign({}, credentialOfferState1.credentialOffer.credential_offer), { grants: Object.assign(Object.assign({}, credentialOfferState1.credentialOffer.credential_offer.grants), { 'urn:ietf:params:oauth:grant-type:pre-authorized_code': Object.assign(Object.assign({}, (_b = (_a = credentialOfferState1.credentialOffer.credential_offer) === null || _a === void 0 ? void 0 : _a.grants) === null || _b === void 0 ? void 0 : _b['urn:ietf:params:oauth:grant-type:pre-authorized_code']), { 'pre-authorized_code': preAuthorizedCode2, user_pin_required: false }) }) }) }) });
        const credentialOfferState3 = Object.assign(Object.assign({}, credentialOfferState1), { preAuthorizedCode: preAuthorizedCode3, createdAt: 0 });
        const credentialOfferSessions = new state_manager_1.MemoryStates();
        yield credentialOfferSessions.set(preAuthorizedCode1, credentialOfferState1);
        yield credentialOfferSessions.set(preAuthorizedCode2, credentialOfferState2);
        yield credentialOfferSessions.set(preAuthorizedCode3, credentialOfferState3);
        const vcIssuer = new oid4vci_issuer_1.VcIssuer({
            // authorization_server: 'https://authorization-server',
            // credential_endpoint: 'https://credential-endpoint',
            credential_issuer: 'https://credential-issuer',
            display: [{ name: 'example issuer', locale: 'en-US' }],
            credentials_supported: [
                {
                    format: 'jwt_vc_json',
                    types: ['VerifiableCredential', 'UniversityDegreeCredential'],
                    credentialSubject: {
                        given_name: {
                            display: [
                                {
                                    name: 'given name',
                                    locale: 'en-US',
                                },
                            ],
                        },
                    },
                    cryptographic_suites_supported: ['ES256K'],
                    cryptographic_binding_methods_supported: ['did'],
                    id: 'UniversityDegree_JWT',
                    display: [
                        {
                            name: 'University Credential',
                            locale: 'en-US',
                            logo: {
                                url: 'https://exampleuniversity.com/public/logo.png',
                                alt_text: 'a square logo of a university',
                            },
                            background_color: '#12107c',
                            text_color: '#FFFFFF',
                        },
                    ],
                },
            ],
        }, {
            cNonceExpiresIn: 300,
            credentialOfferSessions,
            cNonces: new state_manager_1.MemoryStates(),
            uris: new state_manager_1.MemoryStates(),
        });
        expressSupport = ssi_express_support_1.ExpressBuilder.fromServerOpts({
            startListening: false,
            port: 9000,
            hostname: '0.0.0.0',
        }).build({ startListening: false });
        const vcIssuerServer = new OID4VCIServer_1.OID4VCIServer(expressSupport, {
            issuer: vcIssuer,
            baseUrl: 'http://localhost:9000',
            endpointOpts: {
                tokenEndpointOpts: {
                    accessTokenSignerCallback: signerCallback,
                    accessTokenIssuer: 'https://www.example.com',
                    preAuthorizedCodeExpirationDuration: 2000,
                    tokenExpiresIn: 300,
                },
            },
        });
        expressSupport.start();
        app = vcIssuerServer.app;
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        if (expressSupport) {
            yield expressSupport.stop();
        }
        yield new Promise((resolve) => setTimeout((v) => resolve(v), 500));
    }));
    it('should return the access token', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode1}&user_pin=493536`);
        expect(res.statusCode).toEqual(200);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            access_token: expect.stringContaining('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJpYXQi'),
            token_type: 'bearer',
            expires_in: 300,
            c_nonce: expect.any(String),
            c_nonce_expires_in: 300,
            authorization_pending: false,
            interval: 300,
        });
    }));
    it('should return http code 400 with message User pin is required', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode1}`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_request',
            error_description: 'User pin is required',
        });
    }));
    it('should return http code 400 with message pre-authorized_code is required', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app).post('/token').send('grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&user_pin=493536');
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_request',
            error_description: 'pre-authorized_code is required',
        });
    }));
    it('should return http code 400 with message unsupported grant_type', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app).post('/token').send(`grant_type=non-existent&pre-authorized_code=${preAuthorizedCode1}&user_pin=493536`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_grant',
            error_description: 'unsupported grant_type',
        });
    }));
    it('should return http code 400 with message PIN does not match', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode1}&user_pin=493537`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_grant',
            error_description: 'PIN is invalid',
        });
    }));
    it('should return http code 400 with message PIN must consist of maximum 8 numeric characters', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode1}&user_pin=invalid`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_grant',
            error_description: 'PIN must consist of maximum 8 numeric characters',
        });
    }));
    it('should return http code 400 with message pre-authorized_code not found', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=test&user_pin=493536`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_request',
            error_description: oid4vci_common_1.STATE_MISSING_ERROR + ' (test)',
        });
    }));
    it('should return http code 400 with message User pin is not required', () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode2}&user_pin=493536`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_request',
            error_description: 'User pin is not required',
        });
    }));
    it('should return http code 400 with message pre-authorized code expired', () => __awaiter(void 0, void 0, void 0, function* () {
        yield new Promise((r) => setTimeout(r, 2000));
        const res = yield (0, supertest_1.default)(app)
            .post('/token')
            .send(`grant_type=urn:ietf:params:oauth:grant-type:pre-authorized_code&pre-authorized_code=${preAuthorizedCode3}&user_pin=493536`);
        expect(res.statusCode).toEqual(400);
        const actual = JSON.parse(res.text);
        expect(actual).toEqual({
            error: 'invalid_grant',
            error_description: 'pre-authorized_code is expired',
        });
    }));
});
