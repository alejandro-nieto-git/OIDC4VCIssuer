import { ICredentialContextType, IVerifiableCredential, W3CVerifiableCredential } from '@sphereon/ssi-types';
import { ProofOfPossession } from './CredentialIssuance.types';
import { AuthorizationServerMetadata } from './ServerMetadata';
import { CredentialOfferSession } from './StateManager.types';
import { CredentialRequestV1_0_11 } from './v1_0_11.types';
/**
 * Important Note: please be aware that these Common interfaces are based on versions v1_0.11 and v1_0.09
 */
export interface ImageInfo {
    url?: string;
    alt_text?: string;
    [key: string]: unknown;
}
export type OID4VCICredentialFormat = 'jwt_vc_json' | 'jwt_vc_json-ld' | 'ldp_vc' | 'vc+sd-jwt' | 'jwt_vc';
export interface NameAndLocale {
    name?: string;
    locale?: string;
    [key: string]: unknown;
}
export interface LogoAndColor {
    logo?: ImageInfo;
    description?: string;
    background_color?: string;
    text_color?: string;
}
export type CredentialsSupportedDisplay = NameAndLocale & LogoAndColor & {
    name: string;
    background_image?: ImageInfo;
};
export type MetadataDisplay = NameAndLocale & LogoAndColor & {
    name?: string;
};
export interface CredentialSupplierConfig {
    [key: string]: any;
}
export interface CredentialIssuerMetadataOpts {
    credential_endpoint?: string;
    batch_credential_endpoint?: string;
    credentials_supported: CredentialSupported[];
    credential_issuer: string;
    authorization_server?: string;
    token_endpoint?: string;
    display?: MetadataDisplay[];
    credential_supplier_config?: CredentialSupplierConfig;
}
export interface CredentialIssuerMetadata extends CredentialIssuerMetadataOpts, Partial<AuthorizationServerMetadata> {
    authorization_servers?: string[];
    credential_endpoint: string;
    credential_response_encryption_alg_values_supported?: string;
    credential_response_encryption_enc_values_supported?: string;
    require_credential_response_encryption?: boolean;
    credential_identifiers_supported?: boolean;
}
export interface CredentialSupportedBrief {
    cryptographic_binding_methods_supported?: string[];
    cryptographic_suites_supported?: string[];
}
export type CommonCredentialSupported = CredentialSupportedBrief & {
    format: OID4VCICredentialFormat | string;
    id?: string;
    display?: CredentialsSupportedDisplay[];
};
export interface CredentialSupportedJwtVcJsonLdAndLdpVc extends CommonCredentialSupported {
    types: string[];
    '@context': ICredentialContextType[];
    credentialSubject?: IssuerCredentialSubject;
    order?: string[];
    format: 'ldp_vc' | 'jwt_vc_json-ld';
}
export interface CredentialSupportedJwtVcJson extends CommonCredentialSupported {
    types: string[];
    credentialSubject?: IssuerCredentialSubject;
    order?: string[];
    format: 'jwt_vc_json' | 'jwt_vc';
}
export interface CredentialSupportedSdJwtVc extends CommonCredentialSupported {
    format: 'vc+sd-jwt';
    vct: string;
    claims?: IssuerCredentialSubject;
    order?: string[];
}
export type CredentialSupported = CommonCredentialSupported & (CredentialSupportedJwtVcJson | CredentialSupportedJwtVcJsonLdAndLdpVc | CredentialSupportedSdJwtVc);
export interface CommonCredentialOfferFormat {
    format: OID4VCICredentialFormat | string;
}
export interface CredentialOfferFormatJwtVcJsonLdAndLdpVc extends CommonCredentialOfferFormat {
    format: 'ldp_vc' | 'jwt_vc_json-ld';
    credential_definition: JsonLdIssuerCredentialDefinition;
}
export interface CredentialOfferFormatJwtVcJson extends CommonCredentialOfferFormat {
    format: 'jwt_vc_json' | 'jwt_vc';
    types: string[];
}
export interface CredentialOfferFormatSdJwtVc extends CommonCredentialOfferFormat {
    format: 'vc+sd-jwt';
    vct: string;
    claims?: IssuerCredentialSubject;
}
export type CredentialOfferFormat = CommonCredentialOfferFormat & (CredentialOfferFormatJwtVcJsonLdAndLdpVc | CredentialOfferFormatJwtVcJson | CredentialOfferFormatSdJwtVc);
/**
 * Optional storage that can help the credential Data Supplier. For instance to store credential input data during offer creation, if no additional data can be supplied later on
 */
export type CredentialDataSupplierInput = any;
export type CreateCredentialOfferURIResult = {
    uri: string;
    qrCodeDataUri?: string;
    session: CredentialOfferSession;
    userPin?: string;
    userPinLength?: number;
    userPinRequired: boolean;
};
export interface JsonLdIssuerCredentialDefinition {
    '@context': ICredentialContextType[];
    types: string[];
    credentialSubject?: IssuerCredentialSubject;
}
export interface ErrorResponse extends Response {
    error: string;
    error_description?: string;
    error_uri?: string;
    state?: string;
}
export type UniformCredentialRequest = CredentialRequestV1_0_11;
export interface CommonCredentialRequest {
    format: OID4VCICredentialFormat;
    proof?: ProofOfPossession;
}
export interface CredentialRequestJwtVcJson extends CommonCredentialRequest {
    format: 'jwt_vc_json' | 'jwt_vc';
    types: string[];
    credentialSubject?: IssuerCredentialSubject;
}
export interface CredentialRequestJwtVcJsonLdAndLdpVc extends CommonCredentialRequest {
    format: 'ldp_vc' | 'jwt_vc_json-ld';
    credential_definition: JsonLdIssuerCredentialDefinition;
}
export interface CredentialRequestSdJwtVc extends CommonCredentialRequest {
    format: 'vc+sd-jwt';
    vct: string;
    claims?: IssuerCredentialSubject;
}
export interface CommonCredentialResponse {
    format: string;
    credential?: W3CVerifiableCredential;
    acceptance_token?: string;
    c_nonce?: string;
    c_nonce_expires_in?: string;
}
export interface CredentialResponseLdpVc extends CommonCredentialResponse {
    format: 'ldp_vc';
    credential: IVerifiableCredential;
}
export interface CredentialResponseJwtVc {
    format: 'jwt_vc_json' | 'jwt_vc_json-ld';
    credential: string;
}
export interface CredentialResponseSdJwtVc {
    format: 'vc+sd-jwt';
    credential: string;
}
export type IssuerCredentialSubjectDisplay = CredentialSubjectDisplay & {
    [key: string]: CredentialSubjectDisplay;
};
export interface CredentialSubjectDisplay {
    mandatory?: boolean;
    value_type?: string;
    display?: NameAndLocale[];
}
export interface IssuerCredentialSubject {
    [key: string]: IssuerCredentialSubjectDisplay;
}
export interface Grant {
    authorization_code?: GrantAuthorizationCode;
    'urn:ietf:params:oauth:grant-type:pre-authorized_code'?: GrantUrnIetf;
}
export interface GrantAuthorizationCode {
    /**
     * OPTIONAL. String value created by the Credential Issuer and opaque to the Wallet that is used to bind the subsequent
     * Authorization Request with the Credential Issuer to a context set up during previous steps.
     */
    issuer_state?: string;
    /**
     * OPTIONAL string that the Wallet can use to identify the Authorization Server to use with this grant type when authorization_servers parameter in the Credential Issuer metadata has multiple entries. MUST NOT be used otherwise. The value of this parameter MUST match with one of the values in the authorization_servers array obtained from the Credential Issuer metadata
     */
    authorization_server?: string;
}
export interface GrantUrnIetf {
    /**
     * REQUIRED. The code representing the Credential Issuer's authorization for the Wallet to obtain Credentials of a certain type.
     */
    'pre-authorized_code': string;
    /**
     * OPTIONAL. Boolean value specifying whether the Credential Issuer expects presentation of a user PIN along with the Token Request
     * in a Pre-Authorized Code Flow. Default is false.
     */
    user_pin_required: boolean;
    /**
     * OPTIONAL. The minimum amount of time in seconds that the Wallet SHOULD wait between polling requests to the token endpoint (in case the Authorization Server responds with error code authorization_pending - see Section 6.3). If no value is provided, Wallets MUST use 5 as the default.
     */
    interval?: number;
    /**
     * OPTIONAL string that the Wallet can use to identify the Authorization Server to use with this grant type when authorization_servers parameter in the Credential Issuer metadata has multiple entries. MUST NOT be used otherwise. The value of this parameter MUST match with one of the values in the authorization_servers array obtained from the Credential Issuer metadata
     */
    authorization_server?: string;
}
export declare const PRE_AUTH_CODE_LITERAL = "pre-authorized_code";
//# sourceMappingURL=Generic.types.d.ts.map