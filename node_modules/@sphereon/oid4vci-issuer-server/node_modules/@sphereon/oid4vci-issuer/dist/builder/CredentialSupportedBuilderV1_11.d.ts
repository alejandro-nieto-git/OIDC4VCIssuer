import { CredentialsSupportedDisplay, CredentialSupported, IssuerCredentialSubject, IssuerCredentialSubjectDisplay, OID4VCICredentialFormat } from '@sphereon/oid4vci-common';
export declare class CredentialSupportedBuilderV1_11 {
    format?: OID4VCICredentialFormat;
    id?: string;
    types?: string[];
    cryptographicBindingMethodsSupported?: ('jwk' | 'cose_key' | 'did' | string)[];
    cryptographicSuitesSupported?: ('jwt_vc' | 'ldp_vc' | string)[];
    display?: CredentialsSupportedDisplay[];
    credentialSubject?: IssuerCredentialSubject;
    withFormat(credentialFormat: OID4VCICredentialFormat): CredentialSupportedBuilderV1_11;
    withId(id: string): CredentialSupportedBuilderV1_11;
    addTypes(type: string | string[]): CredentialSupportedBuilderV1_11;
    withTypes(type: string | string[]): CredentialSupportedBuilderV1_11;
    addCryptographicBindingMethod(method: string | string[]): CredentialSupportedBuilderV1_11;
    withCryptographicBindingMethod(method: string | string[]): CredentialSupportedBuilderV1_11;
    addCryptographicSuitesSupported(suit: string | string[]): CredentialSupportedBuilderV1_11;
    withCryptographicSuitesSupported(suit: string | string[]): CredentialSupportedBuilderV1_11;
    addCredentialSupportedDisplay(credentialDisplay: CredentialsSupportedDisplay | CredentialsSupportedDisplay[]): CredentialSupportedBuilderV1_11;
    withCredentialSupportedDisplay(credentialDisplay: CredentialsSupportedDisplay | CredentialsSupportedDisplay[]): CredentialSupportedBuilderV1_11;
    withCredentialSubjectDisplay(credentialSubject: IssuerCredentialSubject): this;
    addCredentialSubjectPropertyDisplay(subjectProperty: string, issuerCredentialSubjectDisplay: IssuerCredentialSubjectDisplay): CredentialSupportedBuilderV1_11;
    build(): CredentialSupported;
}
//# sourceMappingURL=CredentialSupportedBuilderV1_11.d.ts.map