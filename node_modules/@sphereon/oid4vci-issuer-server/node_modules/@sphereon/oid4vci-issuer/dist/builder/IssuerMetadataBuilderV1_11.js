"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IssuerMetadataBuilderV1_11 = void 0;
const CredentialSupportedBuilderV1_11_1 = require("./CredentialSupportedBuilderV1_11");
const DisplayBuilder_1 = require("./DisplayBuilder");
class IssuerMetadataBuilderV1_11 {
    constructor() {
        this.supportedBuilders = [];
        this.supportedCredentials = [];
        this.displayBuilders = [];
        this.display = [];
    }
    withBatchCredentialEndpoint(batchCredentialEndpoint) {
        this.batchCredentialEndpoint = batchCredentialEndpoint;
        throw Error(`Not supported yet`);
    }
    withAuthorizationServer(authorizationServer) {
        this.authorizationServer = authorizationServer;
        return this;
    }
    withTokenEndpoint(tokenEndpoint) {
        this.tokenEndpoint = tokenEndpoint;
        return this;
    }
    withCredentialEndpoint(credentialEndpoint) {
        this.credentialEndpoint = credentialEndpoint;
        return this;
    }
    withCredentialIssuer(credentialIssuer) {
        this.credentialIssuer = credentialIssuer;
        return this;
    }
    newSupportedCredentialBuilder() {
        const builder = new CredentialSupportedBuilderV1_11_1.CredentialSupportedBuilderV1_11();
        this.addSupportedCredentialBuilder(builder);
        return builder;
    }
    addSupportedCredentialBuilder(supportedCredentialBuilder) {
        this.supportedBuilders.push(supportedCredentialBuilder);
        return this;
    }
    addSupportedCredential(supportedCredential) {
        this.supportedCredentials.push(supportedCredential);
        return this;
    }
    withIssuerDisplay(issuerDisplay) {
        this.display = Array.isArray(issuerDisplay) ? issuerDisplay : [issuerDisplay];
        return this;
    }
    addDisplay(display) {
        this.display.push(display);
    }
    addDisplayBuilder(displayBuilder) {
        this.displayBuilders.push(displayBuilder);
    }
    newDisplayBuilder() {
        const builder = new DisplayBuilder_1.DisplayBuilder();
        this.addDisplayBuilder(builder);
        return builder;
    }
    build() {
        if (!this.credentialIssuer) {
            throw Error('No credential issuer supplied');
        }
        else if (!this.credentialEndpoint) {
            throw Error('No credential endpoint supplied');
        }
        const supportedCredentials = [];
        supportedCredentials.push(...this.supportedCredentials);
        supportedCredentials.push(...this.supportedBuilders.map((builder) => builder.build()));
        if (supportedCredentials.length === 0) {
            throw Error('No supported credentials supplied');
        }
        const display = [];
        display.push(...this.display);
        display.push(...this.displayBuilders.map((builder) => builder.build()));
        return Object.assign(Object.assign(Object.assign({ credential_issuer: this.credentialIssuer, credential_endpoint: this.credentialEndpoint, credentials_supported: supportedCredentials }, (this.authorizationServer && { authorization_server: this.authorizationServer })), (this.tokenEndpoint && { token_endpoint: this.tokenEndpoint })), (display.length > 0 && { display }));
    }
}
exports.IssuerMetadataBuilderV1_11 = IssuerMetadataBuilderV1_11;
//# sourceMappingURL=IssuerMetadataBuilderV1_11.js.map