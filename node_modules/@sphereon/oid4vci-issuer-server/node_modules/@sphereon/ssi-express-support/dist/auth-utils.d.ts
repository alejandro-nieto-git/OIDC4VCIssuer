import express, { NextFunction, RequestHandler } from 'express';
import { ParamsDictionary } from 'express-serve-static-core';
import { ParsedQs } from 'qs';
import { EndpointArgs, HasEndpointOpts } from './types';
export declare const checkUserIsInRole: (opts: {
    roles: string | string[];
}) => (req: express.Request, res: express.Response, next: NextFunction) => void | express.Response<any, Record<string, any>>;
export declare const checkAuthenticationOnly: (opts?: EndpointArgs) => (req: express.Request, res: express.Response, next: express.NextFunction) => void | express.Response<any, Record<string, any>>;
export declare const checkAuthorizationOnly: (opts?: EndpointArgs) => (req: express.Request, res: express.Response, next: express.NextFunction) => void | express.Response<any, Record<string, any>>;
export declare const isUserNotAuthenticated: (req: express.Request, res: express.Response, next: express.NextFunction) => void;
export declare const isUserAuthenticated: (req: express.Request, res: express.Response, next: express.NextFunction) => void | express.Response<any, Record<string, any>>;
export declare const checkAuth: (opts?: EndpointArgs) => RequestHandler<ParamsDictionary, any, any, ParsedQs, Record<string, any>>[];
export declare function copyGlobalAuthToEndpoint(args?: {
    opts?: HasEndpointOpts;
    key: string;
}): void;
export declare function copyGlobalAuthToEndpoints(args?: {
    opts?: HasEndpointOpts;
    keys: string[];
}): void;
//# sourceMappingURL=auth-utils.d.ts.map