"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const state_manager_1 = require("../state-manager");
describe('MemoryIssuerStateManager', () => {
    let memoryIssuerStateManager;
    beforeAll(() => {
        memoryIssuerStateManager = new state_manager_1.MemoryStates({ expiresInSec: 1 });
    });
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        const day = 86400000;
        for (const i of Array.from(Array(3).keys())) {
            const timestamp = +new Date(+new Date() + day * (i - 1));
            const issuerState = new state_manager_1.CredentialOfferStateBuilder()
                .credentialOffer({ credential_offer: { credential_issuer: 'test', credentials: ['test'] } })
                .createdAt(timestamp)
                .build();
            yield memoryIssuerStateManager.set(String(i), issuerState);
        }
    }));
    it('should retrieve a state', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(memoryIssuerStateManager.get(String(0))).resolves.toBeDefined();
        yield expect(memoryIssuerStateManager.getAsserted(String(0))).resolves.toBeDefined();
    }));
    it('should check whether a state exists', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(memoryIssuerStateManager.has(String(1))).resolves.toBeTruthy();
    }));
    it('should delete a state', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(memoryIssuerStateManager.delete(String(1))).resolves.toBeTruthy();
        yield expect(memoryIssuerStateManager.get(String(0))).resolves.toBeDefined();
        yield expect(memoryIssuerStateManager.get(String(1))).resolves.toBeUndefined();
        yield expect(memoryIssuerStateManager.get(String(2))).resolves.toBeDefined();
    }));
    it('should delete all expired states', () => __awaiter(void 0, void 0, void 0, function* () {
        yield memoryIssuerStateManager.clearExpired(+new Date() + 10000);
        // yesterday should be expired
        yield expect(memoryIssuerStateManager.get(String(0))).resolves.toBeUndefined();
        // today should be expired because the method parameter is a few milliseconds ahead
        yield expect(memoryIssuerStateManager.get(String(1))).resolves.toBeUndefined();
        yield expect(memoryIssuerStateManager.get(String(2))).resolves.toBeDefined();
    }));
    it('should delete all states', () => __awaiter(void 0, void 0, void 0, function* () {
        yield memoryIssuerStateManager.clearAll();
        yield expect(memoryIssuerStateManager.get(String(0))).resolves.toBeUndefined();
        yield expect(memoryIssuerStateManager.get(String(1))).resolves.toBeUndefined();
        yield expect(memoryIssuerStateManager.get(String(2))).resolves.toBeUndefined();
    }));
    it('should throw exception when state does not exist', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(memoryIssuerStateManager.getAsserted(String(3))).rejects.toThrowError(Error(oid4vci_common_1.STATE_MISSING_ERROR + ' (3)'));
    }));
});
//# sourceMappingURL=MemoryCredentialOfferStateManager.spec.js.map