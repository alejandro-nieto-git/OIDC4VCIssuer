"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const uuid_1 = require("uuid");
const index_1 = require("../index");
describe('VcIssuer builder should', () => {
    it('generate a VcIssuer', () => {
        const credentialsSupported = new index_1.CredentialSupportedBuilderV1_11()
            .withCryptographicSuitesSupported('ES256K')
            .withCryptographicBindingMethod('did')
            .withFormat('jwt_vc_json')
            .withId('UniversityDegree_JWT')
            .withCredentialSupportedDisplay({
            name: 'University Credential',
            locale: 'en-US',
            logo: {
                url: 'https://exampleuniversity.com/public/logo.png',
                alt_text: 'a square logo of a university',
            },
            background_color: '#12107c',
            text_color: '#FFFFFF',
        })
            .withTypes('VerifiableCredential')
            .addCredentialSubjectPropertyDisplay('given_name', {
            name: 'given name',
            locale: 'en-US',
        })
            .build();
        const vcIssuer = new index_1.VcIssuerBuilder()
            .withAuthorizationServer('https://authorization-server')
            .withCredentialEndpoint('https://credential-endpoint')
            .withCredentialIssuer('https://credential-issuer')
            .withIssuerDisplay({
            name: 'example issuer',
            locale: 'en-US',
        })
            .withInMemoryCredentialOfferState()
            .withInMemoryCNonceState()
            .withCredentialsSupported(credentialsSupported)
            .build();
        expect(vcIssuer.issuerMetadata.authorization_server).toEqual('https://authorization-server');
        expect(vcIssuer.issuerMetadata.display).toBeDefined();
        expect(vcIssuer.issuerMetadata.credentials_supported[0].id).toEqual('UniversityDegree_JWT');
    });
    it('fail to generate a VcIssuer', () => {
        const credentialsSupported = new index_1.CredentialSupportedBuilderV1_11()
            .withCryptographicSuitesSupported('ES256K')
            .withCryptographicBindingMethod('did')
            .withFormat('jwt_vc_json')
            .withTypes('VerifiableCredential')
            .withId('UniversityDegree_JWT')
            .withCredentialSupportedDisplay({
            name: 'University Credential',
            locale: 'en-US',
            logo: {
                url: 'https://exampleuniversity.com/public/logo.png',
                alt_text: 'a square logo of a university',
            },
            background_color: '#12107c',
            text_color: '#FFFFFF',
        })
            .addCredentialSubjectPropertyDisplay('given_name', {
            name: 'given name',
            locale: 'en-US',
        })
            .build();
        expect(() => new index_1.VcIssuerBuilder()
            .withAuthorizationServer('https://authorization-server')
            .withCredentialEndpoint('https://credential-endpoint')
            .withIssuerDisplay({
            name: 'example issuer',
            locale: 'en-US',
        })
            .withCredentialsSupported(credentialsSupported)
            .build()).toThrowError(oid4vci_common_1.TokenErrorResponse.invalid_request);
    });
    it('fail to generate a CredentialSupportedV1_11', () => {
        expect(() => new index_1.CredentialSupportedBuilderV1_11()
            .withCryptographicSuitesSupported('ES256K')
            .withCryptographicBindingMethod('did')
            .withId('UniversityDegree_JWT')
            .build()).toThrowError(oid4vci_common_1.TokenErrorResponse.invalid_request);
    });
    it('should successfully attach an instance of the ICredentialOfferStateManager to the VcIssuer instance', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const credentialsSupported = new index_1.CredentialSupportedBuilderV1_11()
            .withCryptographicSuitesSupported('ES256K')
            .withCryptographicBindingMethod('did')
            .withFormat('jwt_vc_json')
            .withTypes('VerifiableCredential')
            .withId('UniversityDegree_JWT')
            .withCredentialSupportedDisplay({
            name: 'University Credential',
            locale: 'en-US',
            logo: {
                url: 'https://exampleuniversity.com/public/logo.png',
                alt_text: 'a square logo of a university',
            },
            background_color: '#12107c',
            text_color: '#FFFFFF',
        })
            .addCredentialSubjectPropertyDisplay('given_name', {
            name: 'given name',
            locale: 'en-US',
        })
            .build();
        const vcIssuer = new index_1.VcIssuerBuilder()
            .withAuthorizationServer('https://authorization-server')
            .withCredentialEndpoint('https://credential-endpoint')
            .withCredentialIssuer('https://credential-issuer')
            .withIssuerDisplay({
            name: 'example issuer',
            locale: 'en-US',
        })
            .withCredentialsSupported(credentialsSupported)
            .withInMemoryCredentialOfferState()
            .withInMemoryCNonceState()
            .build();
        console.log(JSON.stringify(vcIssuer.issuerMetadata));
        expect(vcIssuer).toBeDefined();
        const preAuthorizedCodecreatedAt = +new Date();
        yield ((_a = vcIssuer.credentialOfferSessions) === null || _a === void 0 ? void 0 : _a.set('test', {
            issuerState: (0, uuid_1.v4)(),
            lastUpdatedAt: preAuthorizedCodecreatedAt,
            status: oid4vci_common_1.IssueStatus.OFFER_CREATED,
            clientId: 'test_client',
            createdAt: preAuthorizedCodecreatedAt,
            userPin: '123456',
            credentialOffer: { credential_offer: { credentials: ['test_credential'], credential_issuer: 'test_issuer' } },
        }));
        yield expect((_b = vcIssuer.credentialOfferSessions) === null || _b === void 0 ? void 0 : _b.get('test')).resolves.toMatchObject({
            clientId: 'test_client',
            userPin: '123456',
            status: oid4vci_common_1.IssueStatus.OFFER_CREATED,
            lastUpdatedAt: preAuthorizedCodecreatedAt,
            createdAt: preAuthorizedCodecreatedAt,
            credentialOffer: { credential_offer: { credentials: ['test_credential'], credential_issuer: 'test_issuer' } },
        });
    }));
});
//# sourceMappingURL=VcIssuerBuilder.spec.js.map