"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialSupportedBuilderV1_11 = void 0;
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
class CredentialSupportedBuilderV1_11 {
    withFormat(credentialFormat) {
        this.format = credentialFormat;
        return this;
    }
    withId(id) {
        this.id = id;
        return this;
    }
    addTypes(type) {
        if (!Array.isArray(type)) {
            this.types = this.types ? [...this.types, type] : [type];
        }
        else {
            this.cryptographicBindingMethodsSupported = this.cryptographicBindingMethodsSupported
                ? [...this.cryptographicBindingMethodsSupported, ...type]
                : type;
        }
        return this;
    }
    withTypes(type) {
        if (this.format === 'vc+sd-jwt' && Array.isArray(type) && type.length > 1) {
            throw new Error('Only one type is allowed for vc+sd-jwt');
        }
        this.types = Array.isArray(type) ? type : [type];
        return this;
    }
    addCryptographicBindingMethod(method) {
        if (!Array.isArray(method)) {
            this.cryptographicBindingMethodsSupported = this.cryptographicBindingMethodsSupported
                ? [...this.cryptographicBindingMethodsSupported, method]
                : [method];
        }
        else {
            this.cryptographicBindingMethodsSupported = this.cryptographicBindingMethodsSupported
                ? [...this.cryptographicBindingMethodsSupported, ...method]
                : method;
        }
        return this;
    }
    withCryptographicBindingMethod(method) {
        this.cryptographicBindingMethodsSupported = Array.isArray(method) ? method : [method];
        return this;
    }
    addCryptographicSuitesSupported(suit) {
        if (!Array.isArray(suit)) {
            this.cryptographicSuitesSupported = this.cryptographicSuitesSupported ? [...this.cryptographicSuitesSupported, suit] : [suit];
        }
        else {
            this.cryptographicSuitesSupported = this.cryptographicSuitesSupported ? [...this.cryptographicSuitesSupported, ...suit] : suit;
        }
        return this;
    }
    withCryptographicSuitesSupported(suit) {
        this.cryptographicSuitesSupported = Array.isArray(suit) ? suit : [suit];
        return this;
    }
    addCredentialSupportedDisplay(credentialDisplay) {
        if (!Array.isArray(credentialDisplay)) {
            this.display = this.display ? [...this.display, credentialDisplay] : [credentialDisplay];
        }
        else {
            this.display = this.display ? [...this.display, ...credentialDisplay] : credentialDisplay;
        }
        return this;
    }
    withCredentialSupportedDisplay(credentialDisplay) {
        this.display = Array.isArray(credentialDisplay) ? credentialDisplay : [credentialDisplay];
        return this;
    }
    withCredentialSubjectDisplay(credentialSubject) {
        this.credentialSubject = credentialSubject;
        return this;
    }
    addCredentialSubjectPropertyDisplay(subjectProperty, issuerCredentialSubjectDisplay) {
        if (!this.credentialSubject) {
            this.credentialSubject = {};
        }
        this.credentialSubject[subjectProperty] = issuerCredentialSubjectDisplay;
        return this;
    }
    build() {
        if (!this.format) {
            throw new Error(oid4vci_common_1.TokenErrorResponse.invalid_request);
        }
        const credentialSupported = {
            format: this.format,
        };
        if (!this.types) {
            throw new Error('types are required');
        }
        // SdJwtVc has a different format
        if ((0, oid4vci_common_1.isFormat)(credentialSupported, 'vc+sd-jwt')) {
            if (this.types.length > 1) {
                throw new Error('Only one type is allowed for vc+sd-jwt');
            }
            credentialSupported.vct = this.types[0];
        }
        // And else would work here, but this way we get the correct typing
        else if ((0, oid4vci_common_1.isNotFormat)(credentialSupported, 'vc+sd-jwt')) {
            credentialSupported.types = this.types;
            if (this.credentialSubject) {
                credentialSupported.credentialSubject = this.credentialSubject;
            }
        }
        if (this.cryptographicSuitesSupported) {
            credentialSupported.cryptographic_suites_supported = this.cryptographicSuitesSupported;
        }
        if (this.cryptographicBindingMethodsSupported) {
            credentialSupported.cryptographic_binding_methods_supported = this.cryptographicBindingMethodsSupported;
        }
        if (this.id) {
            credentialSupported.id = this.id;
        }
        if (this.display) {
            credentialSupported.display = this.display;
        }
        return credentialSupported;
    }
}
exports.CredentialSupportedBuilderV1_11 = CredentialSupportedBuilderV1_11;
//# sourceMappingURL=CredentialSupportedBuilderV1_11.js.map