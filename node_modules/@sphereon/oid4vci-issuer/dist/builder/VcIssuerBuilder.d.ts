import { CNonceState, CredentialIssuerMetadata, CredentialOfferSession, CredentialSupported, IStateManager, JWTVerifyCallback, MetadataDisplay, URIState } from '@sphereon/oid4vci-common';
import { VcIssuer } from '../VcIssuer';
import { CredentialDataSupplier, CredentialSignerCallback } from '../types';
import { IssuerMetadataBuilderV1_11 } from './IssuerMetadataBuilderV1_11';
export declare class VcIssuerBuilder<DIDDoc extends object> {
    issuerMetadataBuilder?: IssuerMetadataBuilderV1_11;
    issuerMetadata: Partial<CredentialIssuerMetadata>;
    defaultCredentialOfferBaseUri?: string;
    userPinRequired?: boolean;
    cNonceExpiresIn?: number;
    credentialOfferStateManager?: IStateManager<CredentialOfferSession>;
    credentialOfferURIManager?: IStateManager<URIState>;
    cNonceStateManager?: IStateManager<CNonceState>;
    credentialSignerCallback?: CredentialSignerCallback<DIDDoc>;
    jwtVerifyCallback?: JWTVerifyCallback<DIDDoc>;
    credentialDataSupplier?: CredentialDataSupplier;
    withIssuerMetadata(issuerMetadata: CredentialIssuerMetadata): this;
    withIssuerMetadataBuilder(builder: IssuerMetadataBuilderV1_11): this;
    withDefaultCredentialOfferBaseUri(baseUri: string): this;
    withCredentialIssuer(issuer: string): this;
    withAuthorizationServer(authorizationServer: string): this;
    withCredentialEndpoint(credentialEndpoint: string): this;
    withBatchCredentialEndpoint(batchCredentialEndpoint: string): this;
    withTokenEndpoint(tokenEndpoint: string): this;
    withIssuerDisplay(issuerDisplay: MetadataDisplay[] | MetadataDisplay): this;
    addIssuerDisplay(issuerDisplay: MetadataDisplay): this;
    withCredentialsSupported(credentialSupported: CredentialSupported | CredentialSupported[]): this;
    addCredentialsSupported(credentialSupported: CredentialSupported): this;
    withUserPinRequired(userPinRequired: boolean): this;
    withCredentialOfferURIStateManager(credentialOfferURIManager: IStateManager<URIState>): this;
    withInMemoryCredentialOfferURIState(): this;
    withCredentialOfferStateManager(credentialOfferManager: IStateManager<CredentialOfferSession>): this;
    withInMemoryCredentialOfferState(): this;
    withCNonceStateManager(cNonceManager: IStateManager<CNonceState>): this;
    withInMemoryCNonceState(): this;
    withCNonceExpiresIn(cNonceExpiresIn: number): this;
    withCredentialSignerCallback(cb: CredentialSignerCallback<DIDDoc>): this;
    withJWTVerifyCallback(verifyCallback: JWTVerifyCallback<DIDDoc>): this;
    withCredentialDataSupplier(credentialDataSupplier: CredentialDataSupplier): this;
    build(): VcIssuer<DIDDoc>;
}
//# sourceMappingURL=VcIssuerBuilder.d.ts.map