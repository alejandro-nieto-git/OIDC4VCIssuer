"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntraIDAuth = void 0;
const passport_1 = __importDefault(require("passport"));
class EntraIDAuth {
    static init(strategy) {
        return new EntraIDAuth(strategy);
    }
    constructor(strategy) {
        this.strategy = strategy;
    }
    withOptions(options) {
        this.options = Object.assign(Object.assign({}, options), { passReqToCallback: 'passReqToCallback' in options ? options.passReqToCallback : false });
        return this;
    }
    connectPassport() {
        const _options = this.options;
        if (!_options) {
            throw Error('No options supplied for EntraID');
        }
        Promise.resolve().then(() => __importStar(require('passport-azure-ad'))).then((entraID) => passport_1.default.use(this.strategy, new entraID.BearerStrategy(_options, function (token, cb) {
            if (token) {
                // console.log(`token: ${JSON.stringify(token, null, 2)}`)
                return cb(null, token);
            }
            return cb('bearer token not found or incorrect', null);
        })))
            .catch((reason) => {
            console.log(reason);
            throw Error('Could not create bearer strategy. Did you include the "passport-azure-ad/bearer-strategy" dependency in package.json?');
        });
    }
}
exports.EntraIDAuth = EntraIDAuth;
//# sourceMappingURL=entra-id-auth.js.map